// Mocks generated by Mockito 5.4.5 from annotations
// in taskify/test/presentation/providers/list_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:taskify/domain/entities/list_entity.dart' as _i5;
import 'package:taskify/domain/repositories/list_repository.dart' as _i2;
import 'package:taskify/domain/usecases/create_list_usecase.dart' as _i6;
import 'package:taskify/domain/usecases/delete_list_usecase.dart' as _i8;
import 'package:taskify/domain/usecases/fetch_lists_usecase.dart' as _i3;
import 'package:taskify/domain/usecases/update_list_usecase.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeListRepository_0 extends _i1.SmartFake
    implements _i2.ListRepository {
  _FakeListRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FetchListsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchListsUseCase extends _i1.Mock implements _i3.FetchListsUseCase {
  MockFetchListsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ListRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeListRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ListRepository);

  @override
  _i4.Future<List<_i5.ListEntity>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<List<_i5.ListEntity>>.value(
              <_i5.ListEntity>[],
            ),
          )
          as _i4.Future<List<_i5.ListEntity>>);
}

/// A class which mocks [CreateListUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateListUseCase extends _i1.Mock implements _i6.CreateListUseCase {
  MockCreateListUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ListRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeListRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ListRepository);

  @override
  _i4.Future<void> call(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#call, [name]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [UpdateListUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateListUseCase extends _i1.Mock implements _i7.UpdateListUseCase {
  MockUpdateListUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ListRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeListRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ListRepository);

  @override
  _i4.Future<void> call(String? id, String? name) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id, name]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [DeleteListUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteListUseCase extends _i1.Mock implements _i8.DeleteListUseCase {
  MockDeleteListUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ListRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeListRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ListRepository);

  @override
  _i4.Future<void> call(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
